package kr.or.nhic.common.controller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import kr.or.nhic.framework.config.ExXMLConfiguration;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * @ProjectName dipis_ext
 * @FileName DownloadController.java
 * @Substance TODO
 * @author zeroyotta
 * @since 2011. 4. 25.
 * @version 1.0
 * @Copyright (c) 2012 국민건강보험공단, LG CNS All Rights Reserved.
 * 
 *            <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 * 2011. 4. 25.     zeroyotta     TODO
 * 
 * </pre>
 */
@Controller("downloadController")
public class DownloadController {
	private final Logger logger = Logger.getLogger(this.getClass());
	
	@RequestMapping(value = "/common/downloadFile.do")
	public void downloadFile(
			@RequestParam(value = "fileName") String pFileName,
			@RequestParam(value = "filePath") String pFilePath,
			HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		// 웹보안 처리
		String referer = request.getHeader("Referer");
		
		if(referer==null || "".equals(referer)) {
			response.sendRedirect("/jsp/common/errorUserSessionRequired.jsp");
			return;
		}
		
		ExXMLConfiguration xmlConfiguration = ExXMLConfiguration.getInstance();
		
		String rootPath = xmlConfiguration.getString("file.download.rootpath");
		String serverName = xmlConfiguration.getString("server.name");
		
		String fileName = pFileName;
		String filePath = pFilePath;
		
		/*
		if("local".equals(serverName)) {
			fileName = new String(pFileName.getBytes("ISO-8859-1"), "MS949");
			filePath = new String(pFilePath.getBytes("ISO-8859-1"), "MS949");
		}
		*/
		
		logger.debug(rootPath + "/" + filePath);
		
		// 해킹방지
		filePath = filePath.replaceAll("\\.{2}", "");
		filePath = filePath.replaceAll("&", "");
		
		File uFile = new File(rootPath + "/" + filePath);
		int fSize = (int) uFile.length();

		if (fSize > 0) {
			BufferedInputStream bis = null;
			ServletOutputStream sos = null;
			
			try {
				bis = new BufferedInputStream(new FileInputStream(uFile));
				sos = response.getOutputStream();
				
				response.setContentType("application/octet-stream; charset=ISO-8859-1");
				response.setHeader("Content-Disposition", "attachment; filename=\""	+ URLEncoder.encode(fileName, "UTF-8") + "\"");
				response.setHeader("Content-Transfer-Encoding", "binary");
				response.setContentLength(fSize);
	
				FileCopyUtils.copy(bis, sos);
				sos.flush();
			} finally {
				if(bis!=null) bis.close();
				if(sos!=null) sos.close();
			}
		} else {
			PrintWriter pw = null;
			
			try {
				// setContentType을 프로젝트 환경에 맞추어 변경
				response.setContentType("text/html; charset=EUC-KR");
				
				pw = response.getWriter();
				pw.println("<html><head>");
				pw.println("<script>alert('존재하지 않는 파일입니다.');</script>");
				pw.println("</head><body></body></html>");
				pw.flush();
			} finally {
				if(pw!=null) pw.close();
			}
		}
	}

}
