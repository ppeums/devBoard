package kr.or.nhic.framework.util;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import kr.or.nhic.framework.config.ExXMLConfiguration;
import kr.or.nhic.framework.exception.ExRuntimeException;
import kr.or.nhic.framework.vo.FileVO;

import org.apache.log4j.Logger;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

/**
 * @ProjectName dipis_ext
 * @FileName MultipartFileUtil.java
 * @Substance TODO
 * @author zeroyotta
 * @since 2011. 5. 7.
 * @version 1.0
 * @Copyright (c) 2010 국방전산정보원, LG CNS All Rights Reserved.
 * 
 *            <pre>
 * &lt;&lt; 개정이력(Modification Information) &gt;&gt;
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 * 2011. 5. 7.     zeroyotta     TODO
 * 
 * </pre>
 */
public class MultipartFileUtil {
	public static final int BUFFER_SIZE = 8192;
    public static final String SEPERATOR = "/";
    
    private static Logger logger = Logger.getLogger(MultipartFileUtil.class);
	
    /**
	 * request에서 파일 정보를 추출한다.
	 * 
	 * @param request HttpServletRequest 객체
	 * @param systemCd 시스템 코드
	 * @return FileVO List
	 */
	public static List<FileVO> getFileList(HttpServletRequest request, String systemCd) throws Exception {
		ExXMLConfiguration conf = ExXMLConfiguration.getInstance();
	    List<FileVO> fileList = new ArrayList<FileVO>();

		MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
		
		// 파일 추출
		Map<String, MultipartFile> files = multiRequest.getFileMap();

		String rootPath = conf.getString("file.upload.rootpath");

		Iterator<Entry<String, MultipartFile>> itr = files.entrySet().iterator();
		MultipartFile file;
		String filenameToSave;
		String originalFilename;
		
		while (itr.hasNext()) {
			file = itr.next().getValue();
			originalFilename = file.getOriginalFilename();
			
			if (!"".equals(originalFilename)) {
				// 웹보안(확장자 체크)
				if(!checkFileExt(originalFilename, conf)) {
					throw new ExRuntimeException("업로드할 수 없는 파일입니다.");
				}
				
				filenameToSave = getFilenameToSave(rootPath, systemCd, originalFilename);

				// 파일 저장
				file.transferTo(new File(rootPath + SEPERATOR + systemCd + SEPERATOR + filenameToSave));

				// 파일 정보를 VO에 설정
				FileVO fileVO = new FileVO();

				fileVO.setDirectory(rootPath + SEPERATOR + systemCd);
				fileVO.setFilename(filenameToSave);
				fileVO.setOriginalFilename(originalFilename);
				fileVO.setSize(file.getSize());
				fileList.add(fileVO);
			}
		}
		
		return fileList;
	}
	
	/**
	 * 파일 중복 처리
	 */
	private static String getFilenameToSave(String rootPath, String systemCd, String fileName) {
		String time = DateUtil.dateToString(Calendar.getInstance().getTime(), "yyyyMMddHHmmssSSS");
		String fileNamePart;
		String fileExtPart;
		int pointInx = fileName.lastIndexOf(".");

		// 확장자가 없는 경우
		if (pointInx == -1) {
			fileNamePart = fileName;
			fileExtPart = "";
		}
		// 확장자가 있는 경우
		else {
			fileNamePart = fileName.substring(0, pointInx);
			fileExtPart = fileName.substring(pointInx);
		}

		File file = new File(rootPath + SEPERATOR + systemCd + SEPERATOR + fileNamePart
				+ "[" + time + "]" + fileExtPart);

		// 파일 중복 시 index 추가
		if (file.exists()) {
			int i = 1;

			// 무한 루핑 방지를 위해 100까지만 카운팅
			while (i <= 100) {
				file = new File(rootPath + SEPERATOR + systemCd + SEPERATOR + fileNamePart
						+ "[" + time + "-" + i + "]" + fileExtPart);

				if (!file.exists())
					break;

				i++;
			}
		}

		return file.getName();
	}

	/**
	 * 이미지에 대한 미리보기 기능을 제공한다.
	 * 
	 * mimeType의 경우는 JSP 상에서 다음과 같이 얻을 수 있다.
	 * getServletConfig().getServletContext().getMimeType(name);
	 * 
	 * @param response
	 * @param where
	 * @param serverSubPath
	 * @param physicalName
	 * @param mimeType
	 * @throws Exception
	 */
	public static void viewFile(HttpServletResponse response,
			String serverSubPath, String physicalName, String mimeTypeParam)
			throws Exception {
		String mimeType = mimeTypeParam;
		String downFileName = serverSubPath + SEPERATOR
				+ physicalName;

		File file = new File(downFileName);

		if (!file.exists()) {
			throw new FileNotFoundException(downFileName);
		}

		if (!file.isFile()) {
			throw new FileNotFoundException(downFileName);
		}

		byte[] b = new byte[BUFFER_SIZE];

		if (mimeType == null) {
			mimeType = "application/octet-stream;";
		}

		response.setContentType(mimeType);
		response.setHeader("Content-Disposition", "filename=image;");

		BufferedInputStream fin = null;
		BufferedOutputStream outs = null;

		try {
			fin = new BufferedInputStream(new FileInputStream(file));
			outs = new BufferedOutputStream(response.getOutputStream());

			int read = 0;

			while ((read = fin.read(b)) != -1) {
				outs.write(b, 0, read);
			}
		} finally {
			if (outs != null) {
				outs.close();
			}

			if (fin != null) {
				fin.close();
			}
		}
	}
	
	/**
	 * 파일 확장자를 체크한다.
	 * 
	 * @param fileName 파일명
	 * @param conf ExXMLConfiguration
	 * @return 체크 결과
	 * @throws ExRuntimeException
	 */
	private static boolean checkFileExt(String fileName, ExXMLConfiguration conf) throws ExRuntimeException {
		String fileExt = FileUtil.getFileExt(fileName);				
		String[] fileExtDenyList = conf.getStringArray("file.upload.deny-ext");
		boolean result = true;
		
		for(String deny : fileExtDenyList) {
			if(fileExt.compareToIgnoreCase(deny)==0) {
				result = false;
				break;
			}
		}
		
		return result;
	}
}
