package kr.or.nhic.framework.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.Logger;

/**
 * @ProjectName dipis_ext
 * @FileName FileUtil.java
 * @Substance 파일 Util
 * @author admin
 * @since 2011. 3. 15.
 * @version 1.0
 * @Copyright (c) 2012 국민건강보험공단, LG CNS All Rights Reserved.
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 * 2011. 3. 17.     admin     최초작성
 *
 * </pre>
 */

public class FileUtil {
	private final static Logger logger = Logger.getLogger(FileUtil.class);
	
	public static boolean copyFile(String source, String target) throws IOException{
		//if(log.isDebugEnabled())
		//	log.debug(String.format("FileUtil.copyFile %s -> %s", source, target));
		
		String strSource = StringUtil.getPath(source);
		File f1 = new File(strSource);
		
		String strTarget = StringUtil.getPath(target);
		File f2 = new File(strTarget);
		
		f2.createNewFile();
		
		InputStream in = null;
		//For Overwrite the file.
		OutputStream out = null;
		
		try{
			in = new FileInputStream(f1);
			out = new FileOutputStream(f2);
			byte[] buf = new byte[1024];
			int len = in.read(buf);
			while (len > 0){
				out.write(buf, 0, len);
				len = in.read(buf);
			}
		}catch(Exception e){
			logger.error(e);
		}finally{
			if(in!= null) {
				try{
					in.close();
				} catch(Exception e) {
					logger.error(e);
				}
			}
			if(out!= null) {
				try{
					out.close();
				} catch(Exception e) {
					logger.error(e);
				}
			}
		}
				
		return true;
	}
	
	public static boolean isExist(String fullPath){
		//if(log.isDebugEnabled())
		//	log.debug(String.format("isExist fullPath : %s", fullPath));
		
		String strFullPath = StringUtil.getPath(fullPath);
		File f = new File(strFullPath);
		return f.exists();
	}
	

	/**
	 * 파일삭제
	 * @param fullPath
	 * @return
	 */
	public static boolean deleteFile(String fullPath){
		//if(log.isDebugEnabled())
		//	log.debug(String.format("FileUtil.deleteFile fullPath : %s", fullPath));
		
		String strFullPath = StringUtil.getPath(fullPath);
		File f = new File(strFullPath);
		
		return f.delete();
	}
	
	public static boolean deleteFile(File f2, String fullPath){
		//if(log.isDebugEnabled())
		//	log.debug(String.format("deleteFile fullPath : %s", fullPath));
		File f = f2;
		String strFullPath = StringUtil.getPath(fullPath);
		f = new File(strFullPath);
		
		return f.delete();
	}
	
	
	/**
	 * 파일크기 구하기
	 * @param fullPath
	 * @return
	 */
	public static long getLength(String fullPath){
		long rtn = 0;
		
		String strFullPath = StringUtil.getPath(fullPath);
		File f = new File(strFullPath);
		if(!f.exists())
			return rtn;
		
		if(f.isFile())
			rtn = f.length();
		
		return rtn;
	}
	
	/**
	 * 파일 확장자 구하기
	 * 
	 * @param fileName 파일명
	 * @return 확장자
	 */
	public static String getFileExt(String fileName) {
		int lastIndexOf = fileName.lastIndexOf('.');
		String ext = "";
		
		if (lastIndexOf > -1) {
			ext = fileName.substring(lastIndexOf + 1);
		}
		
		return ext;
	}
	
	/**
	 * 파일 내용을 읽어 String으로 반환
	 * 
	 * @param filePath 파일 경로
	 * @return 파일 내용
	 */
	public static String getFileContent(String filePath) {
		StringBuffer content = new StringBuffer();
		
		FileReader fr = null;
        BufferedReader br = null;
        String line = "";
        
		try {
			fr = new FileReader(new File(filePath));
			br = new BufferedReader(fr);
			
			while((line = br.readLine()) != null) {
				content.append(line).append("\n");
			}
		} catch(Exception e) {
			logger.error(e.getMessage(), e);
		} finally {
			try {
                if (br != null) br.close();
            } catch (Exception e) {
            	logger.error(e.getMessage(), e);
            }
            try {
                if (fr != null) fr.close();
            } catch (Exception e) {
            	logger.error(e.getMessage(), e);
            }
		}
		
		return content.toString();
	}
}
