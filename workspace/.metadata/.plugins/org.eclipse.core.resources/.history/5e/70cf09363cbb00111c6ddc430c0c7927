package dipis.common.util;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import sun.misc.BASE64Decoder;
import dipis.common.config.ExXMLConfiguration;
import dipis.common.exception.ExRuntimeException;
import dipis.zapp.common.vo.AtchflDtlVO;
import dipis.zapp.common.vo.AtchflVO;

/**
 * @ProjectName dipis_ext
 * @FileName MultipartFileUtil.java
 * @Substance TODO
 * @author zeroyotta
 * @since 2011. 5. 7.
 * @version 1.0
 * @Copyright (c) 2010 국방전산정보원, LG CNS All Rights Reserved.
 * 
 *            <pre>
 * &lt;&lt; 개정이력(Modification Information) &gt;&gt;
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 * 2011. 5. 7.     zeroyotta     TODO
 * 
 * </pre>
 */
public class MultipartFileUtil {
	/** Buffer size */
    public static final int BUFFER_SIZE = 8192;
    public static final String SEPERATOR = "/";
    
    private static Logger logger = Logger.getLogger(MultipartFileUtil.class);
	
    /**
	 * request에서 파일 정보를 추출한다.
	 * 
	 * @param request
	 *            HttpServletRequest 객체
	 * @param conf
	 *            환경설정 정보
	 * @param systemCd
	 *            시스템 코드
	 * @return AtchflVO List
	 */
	@SuppressWarnings("unchecked")
	public static AtchflVO getFileList(HttpServletRequest request,
			ExXMLConfiguration conf, String systemCd) throws Exception {
	    AtchflVO atchflVO = new AtchflVO();
		List<AtchflDtlVO> fileList = new ArrayList<AtchflDtlVO>();

		MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
		
		// 파일 추출
		Map<String, MultipartFile> files = multiRequest.getFileMap();

		String rootPath = conf.getString("file.upload.rootpath");

		Iterator<Entry<String, MultipartFile>> itr = files.entrySet().iterator();
		MultipartFile file;
		String filenameToSave;
		String originalFilename;
		
		while (itr.hasNext()) {
			file = itr.next().getValue();
			originalFilename = file.getOriginalFilename();
			
			if (!"".equals(originalFilename)) {
				// 웹보안(확장자 체크)
				if(!checkFileExt(originalFilename, conf)) {
					throw new ExRuntimeException("업로드할 수 없는 파일입니다.");
				}
				
				filenameToSave = getFilenameToSave(rootPath, systemCd, originalFilename);

				// 파일 저장
				file.transferTo(new File(rootPath + SEPERATOR + systemCd + SEPERATOR + filenameToSave));

				// 파일 정보를 VO에 설정
				AtchflDtlVO fileVO = new AtchflDtlVO();

				fileVO.setAtchflRoute(rootPath + SEPERATOR + systemCd);
				fileVO.setSvrFileNm(filenameToSave);
				fileVO.setAtchflNm(originalFilename);
				fileVO.setAtchflSize(new BigDecimal(file.getSize()));
				fileVO.setExtnsnNm(FileUtil.getFileExt(originalFilename));
				fileVO.setContentType(file.getContentType());
				fileList.add(fileVO);
			}
		}
		
		atchflVO.setAtchflDtlCtlg(fileList);
		
		return atchflVO;
	}
	
	/**
	 * request에서 MyBuilder 파일 정보를 추출한다.
	 * 
	 * @param request
	 *            HttpServletRequest 객체
	 * @param conf
	 *            환경설정 정보
	 * @param systemCd
	 *            시스템 코드
	 * @return AtchflVO List
	 */
	@SuppressWarnings("unchecked")
	public static void uploadMyBuilderFile(
			HttpServletRequest request, HttpServletResponse response,
			ExXMLConfiguration conf, String systemCd) throws Exception {
		PrintWriter out = response.getWriter();
		
    	String rootPath = conf.getString("file.upload.rootpath");
    	String originalFilename = request.getParameter("name"); // File Name(Client Path 포함)
    	String data = request.getParameter("data");
    	String msg = "";
    	int append = Integer.parseInt(request.getParameter("append"));
    	int end = Integer.parseInt(request.getParameter("end"));

    	originalFilename = originalFilename.substring(originalFilename.lastIndexOf(SEPERATOR) + 1); // Client Path 제거
    	
    	if(data==null || data.length()==0) {
    		msg = "[Error] No data exists : " + originalFilename;
    		
    		logger.debug(msg);
    		out.println(msg);
    	} else {
    		File dir = new File(rootPath + SEPERATOR + systemCd);
    		
    		if(!dir.exists()) {
    			logger.debug("[Error] Directory does not exist : " + dir.getPath());
        		out.println("[Error] Directory does not exist. Inquire of administrator.");
    		} else {
    			String filenameToSave = "";
    			HttpSession session = request.getSession();
				
    			// MyBuilder에서 파일을 버퍼 사이즈만큼 잘라서 반복하여 전송하므로 파일명을 Session에 저장해야 함
    			if(append==0) {
    				filenameToSave = getFilenameToSave(rootPath, systemCd, originalFilename);
    				
    				session.setAttribute("MYBUILDER_FILENAME", filenameToSave);
    			} else {
    				filenameToSave = (String)session.getAttribute("MYBUILDER_FILENAME");
    			}
    			
	    		File file = new File(dir.getPath() + SEPERATOR + filenameToSave);
	    		FileOutputStream fos = null;
				OutputStream os = null;
				
				try {
	    			BASE64Decoder decoder = new BASE64Decoder();
	    			byte[] buff = decoder.decodeBuffer(data);
	    			
	    			fos = new FileOutputStream(file, append > 0 ? true : false); // append 값에 따라 append 또는 신규 생성
	    			os = new BufferedOutputStream(fos, conf.getInt("file.upload.mybuilder.buffer-size"));
	    			
	    			if (os != null) {
	    				os.write(buff, 0, buff.length);
	    				os.flush();
	    			
	    				long size = file.length();
	    				
	    				if(append==0) logger.debug("Start upload : " + file.getPath());
	    				
	    				logger.debug(size + " bytes : " + file.getPath());
	    				out.println(size + " bytes.");
	    				
	    				if(end>0) {
	    					logger.debug("Complete upload : " + file.getPath());
	    					
	    					// 업로드 완료 시 Session에 파일 정보 저장
	    					ArrayList fileList = (ArrayList)session.getAttribute("MYBUILDER_FILE_LIST");
	    					
	    					if(fileList==null) fileList = new ArrayList();
	    					
	    					// 파일 정보를 VO에 설정
	    					AtchflDtlVO fileVO = new AtchflDtlVO();

	    					fileVO.setAtchflRoute(rootPath + "/" + systemCd);
	    					fileVO.setSvrFileNm(filenameToSave);
	    					fileVO.setAtchflNm(originalFilename);
	    					fileVO.setAtchflSize(new BigDecimal(size));
	    					fileVO.setExtnsnNm(FileUtil.getFileExt(originalFilename));
	    					// fileVO.setContentType("");
	    					
	    					fileList.add(fileVO);
	    					
	    					session.setAttribute("MYBUILDER_FILE_LIST", fileList);
	    				}
	    			}
	    		} catch(Exception e) {
	    			throw new ExRuntimeException(e);
	    		} finally {
	    			// Resource 해제
	    			if(fos!=null) {
	    				try { fos.close(); } catch(Exception e) { throw new ExRuntimeException(e);}
	    			}
	    			if(os!=null) {
	    				try { os.close(); } catch(Exception e) { throw new ExRuntimeException(e);}
	    			}
	    		}
    		}
    	}
	}
	
	/**
	 * HttpSession에서 MyBuilder 파일 목록을 추출한다.
	 * 
	 * @param request
	 *            HttpServletRequest 객체
	 * @return AtchflVO List
	 */
	@SuppressWarnings("unchecked")
	public static AtchflVO getMyBuilderFileList(HttpServletRequest request, String systemCd) throws Exception {
		List<AtchflDtlVO> fileList = (ArrayList<AtchflDtlVO>)request.getSession().getAttribute("MYBUILDER_FILE_LIST");
		String tempPath = "";
		String newDir = "";
		String newPath = "";
		File f = null;
		WebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(request.getSession().getServletContext());
		ExXMLConfiguration conf = (ExXMLConfiguration)wac.getBean("xmlConfiguration");
		
		if(fileList!=null) {
			for(AtchflDtlVO atchflDtlVO : fileList) {
				// 웹보안(확장자 체크)
				if(!checkFileExt(atchflDtlVO.getAtchflNm(), conf)) {
					throw new ExRuntimeException("업로드할 수 없는 파일입니다.");
				}
				
				tempPath = atchflDtlVO.getAtchflRoute() + SEPERATOR + atchflDtlVO.getSvrFileNm();
				newDir = atchflDtlVO.getAtchflRoute().replace("temp", "") + systemCd;
				newPath = newDir + SEPERATOR + atchflDtlVO.getSvrFileNm();
				
				logger.debug(tempPath);
				logger.debug(newPath);
				
				f = new File(tempPath);
				f.renameTo(new File(newPath));
				
				atchflDtlVO.setAtchflRoute(newDir);
			}
		}
		
		request.getSession().removeAttribute("MYBUILDER_FILE_LIST");
		
		if(fileList==null) fileList = new ArrayList();
		
		AtchflVO atchflVO = new AtchflVO();
		atchflVO.setAtchflDtlCtlg(fileList);
		return atchflVO;
	}

	/**
	 * 파일 중복 처리
	 */
	private static String getFilenameToSave(String rootPath, String systemCd,
			String fileName) {
		String time = DateUtil.dateToString(Calendar.getInstance().getTime(),
				"yyyyMMddHHmmssSSS");
		String fileNamePart;
		String fileExtPart;
		int pointInx = fileName.lastIndexOf(".");

		// 확장자가 없는 경우
		if (pointInx == -1) {
			fileNamePart = fileName;
			fileExtPart = "";
		}
		// 확장자가 있는 경우
		else {
			fileNamePart = fileName.substring(0, pointInx);
			fileExtPart = fileName.substring(pointInx);
		}

		File file = new File(rootPath + SEPERATOR + systemCd + SEPERATOR + fileNamePart
				+ "[" + time + "]" + fileExtPart);

		// 파일 중복 시 index 추가
		if (file.exists()) {
			int i = 1;

			// 무한 루핑 방지를 위해 100까지만 카운팅
			while (i <= 100) {
				file = new File(rootPath + SEPERATOR + systemCd + SEPERATOR + fileNamePart
						+ "[" + time + "-" + i + "]" + fileExtPart);

				if (!file.exists())
					break;

				i++;
			}
		}

		return file.getName();
	}

	/**
	 * 이미지에 대한 미리보기 기능을 제공한다.
	 * 
	 * mimeType의 경우는 JSP 상에서 다음과 같이 얻을 수 있다.
	 * getServletConfig().getServletContext().getMimeType(name);
	 * 
	 * @param response
	 * @param where
	 * @param serverSubPath
	 * @param physicalName
	 * @param mimeType
	 * @throws Exception
	 */
	public static void viewFile(HttpServletResponse response,
			String serverSubPath, String physicalName, String mimeTypeParam)
			throws Exception {
		String mimeType = mimeTypeParam;
		String downFileName = serverSubPath + SEPERATOR
				+ physicalName;

		File file = new File(downFileName);

		if (!file.exists()) {
			throw new FileNotFoundException(downFileName);
		}

		if (!file.isFile()) {
			throw new FileNotFoundException(downFileName);
		}

		byte[] b = new byte[BUFFER_SIZE];

		if (mimeType == null) {
			mimeType = "application/octet-stream;";
		}

		response.setContentType(mimeType);
		response.setHeader("Content-Disposition", "filename=image;");

		BufferedInputStream fin = null;
		BufferedOutputStream outs = null;

		try {
			fin = new BufferedInputStream(new FileInputStream(file));
			outs = new BufferedOutputStream(response.getOutputStream());

			int read = 0;

			while ((read = fin.read(b)) != -1) {
				outs.write(b, 0, read);
			}
		} finally {
			if (outs != null) {
				outs.close();
			}

			if (fin != null) {
				fin.close();
			}
		}
	}
	
	/**
	 * 파일 확장자를 체크한다.
	 * 
	 * @param fileName 파일명
	 * @param conf ExXMLConfiguration
	 * @return 체크 결과
	 * @throws ExRuntimeException
	 */
	private static boolean checkFileExt(String fileName, ExXMLConfiguration conf) throws ExRuntimeException {
		String fileExt = FileUtil.getFileExt(fileName);				
		String[] fileExtDenyList = conf.getStringArray("file.upload.deny-ext");
		boolean result = true;
		
		for(String deny : fileExtDenyList) {
			if(fileExt.compareToIgnoreCase(deny)==0) {
				result = false;
				break;
			}
		}
		
		return result;
	}
}
