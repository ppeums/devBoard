	/* jQuery Custom Plugin Functions */

	/**
	 * Checkbox 체크 여부를 리턴
	 */
	$.fn.isChecked = function() {
		var result = false;
		
		this.each(function() {
			if(this.checked) {
				result = true;
				return false;
			}
		});
		
		return result;
	};
	
	// 상태 관리를 위한 global 변수
	var G_ZZ = {};
	
	/**
	 * Companion.JS와 연동하여 디버깅 로그를 출력, Companion.JS 적용을 위해 파일 인코딩을 반드시 UTF-8로 설정
	 * 
	 * @param obj 출력하고자 하는 Object
	 * @return void
	 */
	function gfn_debug(obj) {
		if(window.console) {
			console.debug(obj);
		}
	}
	
	// AJAX Callback 함수를 위한 변수
	var ajaxCallback;
	
	/**
	 * AJAX Submit
	 * 
	 * @param targetUrl Target URL
	 * @param params Parameters
	 * @param callback Callback function
	 * @return void
	 */
	function gfn_ajaxSubmit(targetUrl, params, callback) {
		$("#ajaxLoaderImageDiv").remove();
		$("body").append("<div id='ajaxLoaderImageDiv'><img id='ajaxLoaderImage' src='/images/ajax-loader.gif' /></div>");
		$("#ajaxLoaderImageDiv")[0].style.position = "absolute";
		$("#ajaxLoaderImageDiv")[0].style.left = G_ZZ.clientX + "px";
		$("#ajaxLoaderImageDiv")[0].style.top = G_ZZ.clientY + "px";
		
		params["DIPIS_AJAX_PARAM"] = "ajax";
		
		ajaxCallback = callback;
		
		$.ajax({
			url:targetUrl,
			type:'POST',
			data:params,
			dataType:'xml',
			timeout:0,
			error:gfn_ajaxSubmitErrorHandler,
			success:gfn_ajaxSubmitCallback
		});
	}

	/**
	 * AJAX Callback function
	 * 
	 * @param xml 서버에서 수신한 XML 데이터
	 * @return void
	 */
	function gfn_ajaxSubmitCallback(xml) {
		$("#ajaxLoaderImageDiv").remove();

		var sessionCheck = "";

		/*
		$(xml).find("item").each(function() {
			sessionCheck = jQeury("sessionCheck", $(this)).text();
		});
		*/
		
		if(sessionCheck=="false") {
			alert("세션이 만료되어 로그인 페이지로 이동합니다.");

			if(opener) {
				opener.top.location.href = "/";
				self.close();
			} else {
				top.location.href = "/";
			}
		} else {
			ajaxCallback(xml);
		}
	}

	/**
	 * AJAX Error Handler
	 * 
	 * @param XMLHttpRequest XMLHttpRequest
	 * @param textStatus Status
	 * @param errorThrown Error
	 * @return void
	 */
	function gfn_ajaxSubmitErrorHandler(XMLHttpRequest, textStatus, errorThrown) {
		$("#ajaxLoaderImageDiv").remove();

		if(textStatus=="parsererror") {
			alert("서버에서 에러가 발생하였습니다. 관리자에게 문의하십시오.");
		} else if(textStatus=="error") {
			alert("서버가 응답하지 않습니다. 관리자에게 문의하십시오.");
		} else {
			alert("[" + textStatus + "]");
		}
	}
	
	/**
	 * AJAX 호출 결과 XML을 Select Box Option에 추가
	 * 
	 * @param objId Select Box ID
	 * @param xml XML Data
	 * @param nameAndValue Name, Value로 사용할 Element Name
	 * @param selectedValue 선택된 값
	 */
	function gfn_setSelectBox(objId, xml, nameAndValue, selectedValue) {
		var obj = $("#" + objId);
		
		var nameAndValueArr = nameAndValue.split(",");
		var nameElementName = nameAndValueArr[0];
		var valueElementName = nameAndValueArr[1];
		
		// option 삭제
		obj.empty();

		// option 추가
		$(xml).find("item").each(function() {
			var item = $(this);

       		//cfDebug($("value", item).text() + "/" + $("text", item).text());
			
			// 조회조건 유지
			var selected = "";
			
			if(selectedValue && selectedValue==$(valueElementName, item).text()) {
				selected = "selected";
			}
			
       		var option = "<option value='" + $(valueElementName, item).text() + "' " + selected + ">"
       		           + $(nameElementName, item).text()
                       + "</option>";
       		
			obj.append(option);
		});
	}

	/**
	 * 달력 팝업 오픈
	 * 
	 * @param objectId
	 * @param event
	 * @param startYear
	 * @param endYear
	 * @param callback
	 * @param fixed
	 * @return void
	 */
	function gfn_openCalendar(objectId, evt, startYear, endYear, callback, fixed) {
		var extendParam = "";

		if(startYear!=null && startYear!="" && endYear!=null && endYear!="") {
			extendParam += "&startYear=" + startYear + "&endYear=" + endYear;
		}

		if(callback!=null && callback!="") {
			extendParam += "&callback=" + callback;
		}

		if(fixed!=null && fixed!="") {
			extendParam += "&fixed=" + fixed;

			var year = $("#" + objectId)[0].getOriginalValue().substring(0, 4);
			var month = parseInt($("#" + objectId)[0].getOriginalValue().substring(4, 6), 10) - 1; // 0으로 시작하면 반드시 10진수 처리

			extendParam += "&year=" + year;
			extendParam += "&month=" + month;
		}

		var url = "/common/openCalendar.do?objectId=" + objectId + extendParam;
		var winName = "Calendar";
		var winProps = "toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=no,resizable=yes,"
		             + "width=230px,height=225px,left=" + evt.screenX + ",top=" + evt.screenY;
		var win = window.open(url, winName, winProps);

		win.focus();
	}
	
	/**
	 * 파일 다운로드
	 * 
	 * @param fileName 저장되는 파일명
	 * @param filePath 서버에 저장된 파일 경로
	 * @return void
	 */
	function gfn_downloadFile(fileName, filePath) {
		$("#fileDownload").remove();
		$("body").append("<iframe id='fileDownload' width='0' height='0' />");
		$("#fileDownload")[0].src = encodeURI("/common/downloadFile.do?fileName=" + fileName + "&filePath=" + filePath);
	}
	
	/**
	 * 테이블 hover시 Lhover 클래스 부여
	 */
	function gfn_applyStyleListTable () {
		$(".LblockListTable table tr").each(function() {
			var tr = $(this);
			
			tr.mouseover(function() {
				tr.addClass("Lhover");
			});
			tr.mouseout(function() {
				tr.removeClass("Lhover");
			});
		});
	}
	
	/**
	 * 날짜를 비교하여 차이값을 정수값으로 리턴,
	 * 0이면 동일한 날짜,
	 * 양수이면 fromDateStr가 toDateStr보다 큼
	 * 음수이면 fromDateStr가 toDateStr보다 작음
	 *
	 * @param fromDateStr 시작일자
	 * @param toDateStr 종료일자
	 * @return 차이값
	 */
	function gfn_compareDate(fromDateStr, toDateStr) {
		var fromDateArr = fromDateStr.split("-");
		var toDateArr = toDateStr.split("-");
		var fromDate = new Date(parseInt(fromDateArr[0]), parseInt(fromDateArr[1])-1, parseInt(fromDateArr[2]));
		var toDate = new Date(parseInt(toDateArr[0]), parseInt(toDateArr[1])-1, parseInt(toDateArr[2]));
		var gap = Math.floor( (fromDate.getTime() - toDate.getTime()) / (60*60*24*1000) );

		return gap;
	}
	 
	/**
	 * Cookie 설정
	 */
	function gfn_setCookie(name, value, expires, path, domain, secure) {
		var today = new Date();
		today.setTime(today.getTime());
		
		if(expires) {
			expires = expires * 1000 * 60 * 60 * 24; // x number of days
		}
		
		var expiresDate = new Date(today.getTime() + expires);
		
		document.cookie = name + "=" + escape(value)
		                + ( expires ? ";expires="+expiresDate.toGMTString() : "" )
		                + ( path ? ";path="+path : "" )
		                + ( domain ? ";domain="+domain : "" )
		                + ( secure ? ";secure" : "" );
	}
	
	/**
	 * Cookie 가져오기
	 */
	function gfn_getCookie(name) {
		var bInx = document.cookie.indexOf(name);
		var eInx = 0;
		
		if(bInx==-1) return "";
		
		bInx = bInx + name.length + 1;
		eInx = document.cookie.indexOf(";", bInx);
		
		if(eInx==-1) eInx = document.cookie.length;
		
		var result = document.cookie.substring(bInx, eInx);
		
		return unescape(result);
	}
	 
	/**
	 * URL로부터 File Name을 리턴
	 */
	function gfn_getFileNameFromUrl(url) {
		var fileName = url.substring(url.lastIndexOf("/") + 1);
		return fileName;
	}
	
	/**
	 * 페이지 로드 시 초기화 함수
	 */
	$(document).ready(function() {
		G_ZZ.clientX = "400";
		G_ZZ.clientY = "300";

		$(document).bind("click", function(event) {
			G_ZZ.clientX = event.clientX;
			G_ZZ.clientY = event.clientY;
		});
		
		// gfn_applyStyleListTable();
	});
