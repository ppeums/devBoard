<?xml version="1.0" encoding="UTF-8"?> 
<java version="1.5.0_07" class="java.beans.XMLDecoder"> 
 <array class="egovframework.dev.tst.tcgenerator.CodeBlockInfo" length="1"> 
  <void index="0"> 
   <object class="egovframework.dev.tst.tcgenerator.CodeBlockInfo"> 
    <void property="tcTemplateName"> 
     <string>Advanced Equality Test</string> 
    </void> 
    <void property="description"> 
     <string>Advanced Equality Test에 대한 테스트케이스 코드블럭을 복사합니다.</string> 
    </void> 
    <void property="codeBlockList"> 
     <array class="java.lang.String" length="7"> 
      <void index="0"> 
       <string>Reflection Equal</string> 
      </void> 
      <void index="1"> 
       <string>Reflection Equal Lenient Order</string> 
      </void> 
      <void index="2"> 
       <string>Assert Reflection Equals Field By Field</string> 
      </void> 
      <void index="3"> 
       <string>Assert Reflection Equals Ignoring Order</string> 
      </void> 
      <void index="4"> 
       <string>Assert Reflection Equals Ignoring Default</string> 
      </void> 
      <void index="5"> 
       <string>Assert Lenient Equals Ignore Default And Order</string> 
      </void> 
      <void index="6"> 
       <string>소스 전체</string> 
      </void> 
     </array> 
    </void> 
    <void property="codeBlocks"> 
     <array class="java.lang.String" length="7"> 
      <void index="0"> 
       <string><![CDATA[
/**
 * 리스트를 비교할 때 하나하나 비교하는 것이 아니라, 
 * 리스트를 통째로 넘겼을 때 리스트 구성 요소를 자동으로 비교하는 방법을 테스트
 * 
 * 테스트에 필요한 데이터 - 간단하게 리스트 두 개를 직접 생성
 * 테스트 결과 - 두 개의 리스트를 비교할 때 전체로 비교해도 리스트 구성 내용이 같은지 자동으로 비교해 참을 리턴
*/
@Test
public void testReflectionEqual() {
	assertReflectionEquals(1, 1L);
	
	List<Double> myList = new ArrayList<Double>();
	myList.add(1.0);
	myList.add(2.0);
	assertReflectionEquals(Arrays.asList(1, 2), myList);
}
       ]]></string> 
      </void> 
      <void index="1"> 
       <string><![CDATA[
/**
 * 리스트를 비교할 때 순서를 무시하고 값이 같은지를 비교하는 방법을 테스트
 * 
 * 테스트에 필요한 데이터 - 간단하게 리스트 두 개를 직접 생성
 * 테스트 결과 - 두 개의 리스트를 만들 때 순서가 다르지만 값은 같은 경우를 넣고 참을 리턴하는지 확인
*/
@Test
public void testReflectionEqualLenientOrder() {
	List<Integer> myList = Arrays.asList(3, 2, 1);
	
	assertReflectionEquals(Arrays.asList(3, 2, 1), myList);
	assertReflectionEquals("순서 무시하고 값이 같은지 비교", Arrays.asList(1, 2, 3), myList, LENIENT_ORDER);
}
       ]]></string> 
      </void> 
      <void index="2"> 
       <string><![CDATA[
/**
 * Value Object 의 비교 (attribute 단위로 하나하나 자동으로 비교해줌)
 * 
 * 테스트에 필요한 데이터 - UserVo 두 개를 직접 생성
 * 테스트 결과 - 객체를 구성하는 값을 하나하나 비교하지 않고, 객채만을 넘겨서 자동으로 비교됨
*/
@Test
public void testAssertReflectionEqualsFieldByField() {
	assertReflectionEquals(
			new UserVo(1, "name", "description", Arrays.asList(new AddressVo("home", "homeaddress"), new AddressVo("office", "officeaddress"))),
			new UserVo(1, "name", "description", Arrays.asList(new AddressVo("home", "homeaddress"), new AddressVo("office", "officeaddress"))));
}
       ]]></string> 
      </void> 
      <void index="3"> 
       <string><![CDATA[
/**
 * 객체를 구성하는 값을 하나하나 자동으로 비교하면서 순서까지도 무시하고 같은지를 확인
 * 
 * 테스트에 필요한 데이터 - UserVo 두 개를 직접 생성
 * 테스트 결과 - 두 개의 리스트를 만들 때 순서가 다르지만 값은 같은 객체를 넣고 참을 리턴하는지 확인
*/
@Test
public void testAssertReflectionEqualsIgnoringOrder() {
	assertReflectionEquals(
			Arrays.asList(new UserVo(1), new UserVo(2)),
			new UserVo[] { new UserVo(2), new UserVo(1) }, 
		    LENIENT_ORDER);
}
       ]]></string> 
      </void> 
      <void index="4"> 
       <string><![CDATA[
/**
 * 디폴트 값을 무시하고 값이 같은지를 비교하는 방법을 테스트
 * 
 * 테스트에 필요한 데이터 - UserVo 두 개를 직접 생성
 * 테스트 결과 - 디폴트 값을 무시하고 참을 리턴
*/
@Test
public void testAssertReflectionEqualsIgnoringDefault() {
	assertReflectionEquals(
			new UserVo(1, "name", null), 
			new UserVo(1, "name", "description1"), 
			IGNORE_DEFAULTS);
}
       ]]></string> 
      </void> 
      <void index="5"> 
       <string><![CDATA[
/**
 * 디폴트 값을 무시하고 순서도 무시하면서 값이 같은지를 비교하는 방법을 테스트
 * 
 * 테스트에 필요한 데이터 - UserVo 두 개를 직접 생성
 * 테스트 결과 - 디폴트 값을 무시하고 참을 리턴
*/
@Test
public void testAssertLenientEqualsIgnoreDefaultAndOrder() {
	assertLenientEquals(Arrays.asList(new UserVo(1, null), new UserVo(2, null)),
			            new UserVo[] { new UserVo(2, "name01"), new UserVo(1, "name02") });
			            
}
       ]]></string> 
      </void> 
      <void index="6"> 
       <string><![CDATA[
import static org.unitils.reflectionassert.ReflectionAssert.assertLenientEquals;
import static org.unitils.reflectionassert.ReflectionAssert.assertReflectionEquals;
import static org.unitils.reflectionassert.ReflectionComparatorMode.IGNORE_DEFAULTS;
import static org.unitils.reflectionassert.ReflectionComparatorMode.LENIENT_ORDER;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import egovframework.guideprogram.test.target.basic.AddressVo;
import egovframework.guideprogram.test.target.basic.UserVo;

public class AdvancedEqualityTest {

	/**
	 * 리스트를 비교할 때 하나하나 비교하는 것이 아니라, 
	 * 리스트를 통째로 넘겼을 때 리스트 구성 요소를 자동으로 비교하는 방법을 테스트
	 * 
	 * 테스트에 필요한 데이터 - 간단하게 리스트 두 개를 직접 생성
	 * 테스트 결과 - 두 개의 리스트를 비교할 때 전체로 비교해도 리스트 구성 내용이 같은지 자동으로 비교해 참을 리턴
	*/
	@Test
	public void testReflectionEqual() {
		assertReflectionEquals(1, 1L);
		
		List<Double> myList = new ArrayList<Double>();
		myList.add(1.0);
		myList.add(2.0);
		assertReflectionEquals(Arrays.asList(1, 2), myList);
	}
	
	/**
	 * 리스트를 비교할 때 순서를 무시하고 값이 같은지를 비교하는 방법을 테스트
	 * 
	 * 테스트에 필요한 데이터 - 간단하게 리스트 두 개를 직접 생성
	 * 테스트 결과 - 두 개의 리스트를 만들 때 순서가 다르지만 값은 같은 경우를 넣고 참을 리턴하는지 확인
	*/
	@Test
	public void testReflectionEqualLenientOrder() {
		List<Integer> myList = Arrays.asList(3, 2, 1);
		
		assertReflectionEquals(Arrays.asList(3, 2, 1), myList);
		assertReflectionEquals("순서 무시하고 값이 같은지 비교", Arrays.asList(1, 2, 3), myList, LENIENT_ORDER);
	}
	
	
	/**
	 * Value Object 의 비교 (attribute 단위로 하나하나 자동으로 비교해줌)
	 * 
	 * 테스트에 필요한 데이터 - UserVo 두 개를 직접 생성
	 * 테스트 결과 - 객체를 구성하는 값을 하나하나 비교하지 않고, 객채만을 넘겨서 자동으로 비교됨
	*/
	@Test
	public void testAssertReflectionEqualsFieldByField() {
		assertReflectionEquals(
				new UserVo(1, "name", "description", Arrays.asList(new AddressVo("home", "homeaddress"), new AddressVo("office", "officeaddress"))),
				new UserVo(1, "name", "description", Arrays.asList(new AddressVo("home", "homeaddress"), new AddressVo("office", "officeaddress"))));
	}
	
	/**
	 * 객체를 구성하는 값을 하나하나 자동으로 비교하면서 순서까지도 무시하고 같은지를 확인
	 * 
	 * 테스트에 필요한 데이터 - UserVo 두 개를 직접 생성
	 * 테스트 결과 - 두 개의 리스트를 만들 때 순서가 다르지만 값은 같은 객체를 넣고 참을 리턴하는지 확인
	*/
	@Test
	public void testAssertReflectionEqualsIgnoringOrder() {
		assertReflectionEquals(
				Arrays.asList(new UserVo(1), new UserVo(2)),
				new UserVo[] { new UserVo(2), new UserVo(1) }, 
			    LENIENT_ORDER);
	}
	
	/**
	 * 디폴트 값을 무시하고 값이 같은지를 비교하는 방법을 테스트
	 * 
	 * 테스트에 필요한 데이터 - UserVo 두 개를 직접 생성
	 * 테스트 결과 - 디폴트 값을 무시하고 참을 리턴
	*/
	@Test
	public void testAssertReflectionEqualsIgnoringDefault() {
		assertReflectionEquals(
				new UserVo(1, "name", null), 
				new UserVo(1, "name", "description1"), 
				IGNORE_DEFAULTS);
	}
	
	/**
	 * 디폴트 값을 무시하고 순서도 무시하면서 값이 같은지를 비교하는 방법을 테스트
	 * 
	 * 테스트에 필요한 데이터 - UserVo 두 개를 직접 생성
	 * 테스트 결과 - 디폴트 값을 무시하고 참을 리턴
	*/
	@Test
	public void testAssertLenientEqualsIgnoreDefaultAndOrder() {
		assertLenientEquals(Arrays.asList(new UserVo(1, null), new UserVo(2, null)),
				            new UserVo[] { new UserVo(2, "name01"), new UserVo(1, "name02") });
				            
	}
}
       ]]></string> 
      </void>
     </array> 
    </void> 
    
   </object> 
  </void> 
 </array> 
</java> 
