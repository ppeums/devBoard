<?xml version="1.0" encoding="UTF-8"?> 
<java version="1.5.0_07" class="java.beans.XMLDecoder"> 
 <array class="egovframework.dev.tst.tcgenerator.CodeBlockInfo" length="1"> 
  <void index="0"> 
   <object class="egovframework.dev.tst.tcgenerator.CodeBlockInfo"> 
    <void property="tcTemplateName"> 
     <string>Setup Test</string> 
    </void> 
    <void property="description"> 
     <string>Setup Test에 대한 테스트케이스 코드블럭을 복사합니다.</string> 
    </void> 
    <void property="codeBlockList"> 
     <array class="java.lang.String" length="7"> 
      <void index="0"> 
       <string>Before Class</string> 
      </void> 
      <void index="1"> 
       <string>Before Method</string> 
      </void> 
      <void index="2"> 
       <string>After Method</string> 
      </void> 
      <void index="3"> 
       <string>After Class</string> 
      </void> 
      <void index="4"> 
       <string>Test First Method</string> 
      </void> 
      <void index="5"> 
       <string>Test Second Method</string> 
      </void> 
      <void index="6"> 
       <string>소스 전체</string> 
      </void>
     </array> 
    </void> 
    <void property="codeBlocks"> 
     <array class="java.lang.String" length="7"> 
      <void index="0"> 
       <string><![CDATA[
/** Before/After, BeforeClass/AfterClass 의 수행 시점을 파악하기 위한  임시 변수 */
static StringBuffer sb;

/**
 * 클래스가 실행되기 전에 sb 변수를 초기화 하고 
 * 실행되었음을 알리기 위해 해당 어노테이션을 스트링으로 attend 함
*/
@BeforeClass
public static void doBeforeClass() {
	sb = new StringBuffer();
	sb.append("BeforeClass/");
	
	assertEquals("BeforeClass/", sb.toString());
}
       ]]></string> 
      </void> 
      <void index="1"> 
       <string><![CDATA[
/**
 * 실행되었음을 알리기 위해 해당 어노테이션을 스트링으로 attend 함
*/
@Before
public void doBeforeMethod() {
	sb.append("BeforeMethod/");
}
       ]]></string> 
      </void> 
      <void index="2"> 
       <string><![CDATA[
/**
 * 실행되었음을 알리기 위해 해당 어노테이션을 스트링으로 attend 함
*/
@After
public void doAfterMethod() {
	sb.append("AfterMethod/");
}
       ]]></string> 
      </void> 
      <void index="3"> 
       <string><![CDATA[
/**
 * 실행되었음을 알리기 위해 해당 어노테이션을 스트링으로 attend 함
*/
@AfterClass
public static void doAfterClass() {
	sb.append("AfterClass/");
	assertEquals("BeforeClass/BeforeMethod/testFirst/AfterMethod/BeforeMethod/testSecond/AfterMethod/AfterClass/", sb.toString());
}
       ]]></string> 
      </void> 
      <void index="4"> 
       <string><![CDATA[
/**
 * 첫번째 테스트 메소드로서 이 메소드가 실행되기 이전에 수행되었을것으로 예상되는 결과와 비교하는 메소드
*/
@Test
public void testFirst() {
	assertEquals("BeforeClass/BeforeMethod/", sb.toString());
	sb.append("testFirst/");
	assertEquals("BeforeClass/BeforeMethod/testFirst/", sb.toString());
}
       ]]></string> 
      </void> 
      <void index="5"> 
       <string><![CDATA[
/**
 * 두번째 테스트 메소드로서 첫번째 메소드 수행 후 실행되는 메소드까지 고려하여 예상되는 결과와 비교하는 메소드
*/
@Test
public void testSecond() {
	assertEquals("BeforeClass/BeforeMethod/testFirst/AfterMethod/BeforeMethod/", sb.toString());
	sb.append("testSecond/");
	assertEquals("BeforeClass/BeforeMethod/testFirst/AfterMethod/BeforeMethod/testSecond/", sb.toString());
}
       ]]></string> 
      </void> 
      <void index="6"> 
       <string><![CDATA[
import static org.junit.Assert.assertEquals;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class SetupTest {

	/** Before/After, BeforeClass/AfterClass 의 수행 시점을 파악하기 위한  임시 변수 */
	static StringBuffer sb;
	
	/**
	 * 클래스가 실행되기 전에 sb 변수를 초기화 하고 
	 * 실행되었음을 알리기 위해 해당 어노테이션을 스트링으로 attend 함
	*/
	@BeforeClass
	public static void doBeforeClass() {
		sb = new StringBuffer();
		sb.append("BeforeClass/");
		
		assertEquals("BeforeClass/", sb.toString());
	}
	
	/**
	 * 실행되었음을 알리기 위해 해당 어노테이션을 스트링으로 attend 함
	*/
	@Before
	public void doBeforeMethod() {
		sb.append("BeforeMethod/");
	}
	
	/**
	 * 실행되었음을 알리기 위해 해당 어노테이션을 스트링으로 attend 함
	*/
	@After
	public void doAfterMethod() {
		sb.append("AfterMethod/");
	}
	
	/**
	 * 실행되었음을 알리기 위해 해당 어노테이션을 스트링으로 attend 함
	*/
	@AfterClass
	public static void doAfterClass() {
		sb.append("AfterClass/");
		assertEquals("BeforeClass/BeforeMethod/testFirst/AfterMethod/BeforeMethod/testSecond/AfterMethod/AfterClass/", sb.toString());
	}
	
	/**
	 * 첫번째 테스트 메소드로서 이 메소드가 실행되기 이전에 수행되었을것으로 예상되는 결과와 비교하는 메소드
	*/
	@Test
	public void testFirst() {
		assertEquals("BeforeClass/BeforeMethod/", sb.toString());
		sb.append("testFirst/");
		assertEquals("BeforeClass/BeforeMethod/testFirst/", sb.toString());
	}
	
	/**
	 * 두번째 테스트 메소드로서 첫번째 메소드 수행 후 실행되는 메소드까지 고려하여 예상되는 결과와 비교하는 메소드
	*/
	@Test
	public void testSecond() {
		assertEquals("BeforeClass/BeforeMethod/testFirst/AfterMethod/BeforeMethod/", sb.toString());
		sb.append("testSecond/");
		assertEquals("BeforeClass/BeforeMethod/testFirst/AfterMethod/BeforeMethod/testSecond/", sb.toString());
	}
}
       ]]></string> 
      </void>
     </array> 
    </void> 
   </object> 
  </void> 
 </array> 
</java> 
